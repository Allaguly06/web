// orders.js - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
let orders = [];
let currentOrderId = null;
const API_BASE_URL = 'https://web-server-qywt.onrender.com/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function initializeOrdersPage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤...');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator();
        
        await loadOrders();
        renderOrdersTable();
        setupEventListeners();
        
        hideLoadingIndicator();
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤:', error);
        hideLoadingIndicator();
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
    const tableBody = document.getElementById('ordersTableBody');
    if (tableBody) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px;">
                    <div style="display: flex; flex-direction: column; align-items: center; gap: 15px;">
                        <div style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid darkblue; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                        <p style="color: #666; margin: 0;">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
                    </div>
                </td>
            </tr>
        `;
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingIndicator() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadOrders() {
    try {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        
        const response = await fetch(`${API_BASE_URL}/orders`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        orders = await response.json();
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        orders.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
        
        return orders;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞', 'error');
        orders = [];
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function loadOrder(orderId) {
    try {
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞: ${orderId}`);
        
        const response = await fetch(`${API_BASE_URL}/orders/${orderId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const order = await response.json();
        console.log(`–ó–∞–∫–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω: ${orderId}`);
        return order;
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
        throw error;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function updateOrder(orderId, updateData) {
    try {
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${orderId}`, updateData);
        
        const response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log(`–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: ${orderId}`);
        return result;
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
        throw error;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function deleteOrderFromServer(orderId) {
    try {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${orderId}`);
        
        const response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {
            method: 'DELETE'
        });
        
        console.log(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:', result);
        
        return result;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        throw error;
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
function renderOrdersTable() {
    const tableBody = document.getElementById('ordersTableBody');
    const emptyOrders = document.getElementById('emptyOrders');
    
    if (!tableBody || !emptyOrders) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM');
        return;
    }
    
    if (orders.length === 0) {
        tableBody.innerHTML = '';
        emptyOrders.style.display = 'block';
        console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
    }
    
    emptyOrders.style.display = 'none';
    tableBody.innerHTML = '';
    
    orders.forEach((order, index) => {
        const row = createTableRow(order, index);
        tableBody.appendChild(row);
    });
    
    console.log(`–û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function createTableRow(order, index) {
    const row = document.createElement('tr');
    
    const orderDate = new Date(order.created_at).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    const coursesList = order.courses.map(course => course.name).join(', ');
    const totalAmount = order.total_amount || order.courses.reduce((sum, course) => sum + course.price, 0);
    
    row.innerHTML = `
        <td data-label="‚Ññ" class="order-number">${index + 1}</td>
        <td data-label="–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞" class="order-date">${orderDate}</td>
        <td data-label="–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞" class="order-courses">
            <ul class="order-courses-list">
                ${order.courses.map(course => `<li title="${course.description || ''}">${course.name}</li>`).join('')}
            </ul>
        </td>
        <td data-label="–°—Ç–æ–∏–º–æ—Å—Ç—å" class="order-total">${totalAmount.toLocaleString()} —Ä—É–±.</td>
        <td data-label="–î–æ—Å—Ç–∞–≤–∫–∞" class="order-delivery">
            ${getDeliveryText(order.customer.delivery_type)}
        </td>
        <td data-label="–°—Ç–∞—Ç—É—Å">
            <span class="order-status status-${order.status || 'paid'}">${getStatusText(order.status)}</span>
        </td>
        <td data-label="–î–µ–π—Å—Ç–≤–∏—è">
            <div class="order-actions">
                <button class="action-btn btn-details" onclick="showOrderDetails('${order.id}')" title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ">
                    üìã
                </button>
                <button class="action-btn btn-edit" onclick="editOrder('${order.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    ‚úèÔ∏è
                </button>
                <button class="action-btn btn-delete" onclick="showDeleteConfirm('${order.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </div>
        </td>
    `;
    
    return row;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
function getDeliveryText(deliveryType) {
    const deliveryTypes = {
        'online': '–û–Ω–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø',
        'email': 'Email —Ä–∞—Å—Å—ã–ª–∫–∞',
        'courier': '–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'
    };
    return deliveryTypes[deliveryType] || '–û–Ω–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
    const statusTypes = {
        'paid': '–û–ø–ª–∞—á–µ–Ω',
        'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusTypes[status] || '–û–ø–ª–∞—á–µ–Ω';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
async function showOrderDetails(orderId) {
    try {
        console.log(`üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: ${orderId}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const content = document.getElementById('orderDetailsContent');
        content.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="width: 30px; height: 30px; border: 3px solid #f3f3f3; border-top: 3px solid darkblue; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 15px;"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞...</p>
            </div>
        `;
        
        const modal = document.getElementById('orderDetailsModal');
        modal.style.display = 'flex';
        
        const order = await loadOrder(orderId);
        
        const orderDate = new Date(order.created_at).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        const updatedDate = order.updated_at ? new Date(order.updated_at).toLocaleDateString('ru-RU') : null;
        const totalAmount = order.total_amount || order.courses.reduce((sum, course) => sum + course.price, 0);
        
        content.innerHTML = `
            <div class="order-summary-details">
                <p><strong>ID –∑–∞–∫–∞–∑–∞:</strong> ${order.id}</p>
                <p><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ${orderDate}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="order-status status-${order.status || 'paid'}">${getStatusText(order.status)}</span></p>
                <p><strong>–§–ò–û:</strong> ${order.customer.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>Email:</strong> ${order.customer.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.customer.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</strong> ${getDeliveryText(order.customer.delivery_type)}</p>
                <p><strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.customer.delivery_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.customer.delivery_time || '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'}</p>
                ${order.customer.comment ? `<p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${order.customer.comment}</p>` : ''}
                ${updatedDate ? `<p><strong>–û–±–Ω–æ–≤–ª–µ–Ω:</strong> ${updatedDate}</p>` : ''}
            </div>
            
            <h3>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</h3>
            ${order.courses.map(course => `
                <div class="course-item-detail">
                    <div>
                        <span class="course-name">${course.name}</span>
                        ${course.description ? `<div class="course-description">${course.description}</div>` : ''}
                    </div>
                    <span class="course-price">${course.price.toLocaleString()} —Ä—É–±.</span>
                </div>
            `).join('')}
            
            <div class="order-total-details">
                –ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString()} —Ä—É–±.
            </div>
        `;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:', error);
        const content = document.getElementById('orderDetailsContent');
        content.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #dc3545;">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</p>
                <p><small>${error.message}</small></p>
            </div>
        `;
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function editOrder(orderId) {
    try {
        console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${orderId}`);
        
        const order = await loadOrder(orderId);
        currentOrderId = orderId;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        document.getElementById('editFullName').value = order.customer.name || '';
        document.getElementById('editEmail').value = order.customer.email || '';
        document.getElementById('editPhone').value = order.customer.phone || '';
        document.getElementById('editDeliveryAddress').value = order.customer.delivery_address || '';
        document.getElementById('editDeliveryType').value = order.customer.delivery_type || 'online';
        document.getElementById('editDeliveryTime').value = order.customer.delivery_time || '';
        document.getElementById('editComment').value = order.customer.comment || '';
        
        const modal = document.getElementById('editOrderModal');
        modal.style.display = 'flex';
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑–∞
async function saveOrderChanges() {
    if (!currentOrderId) {
        showNotification('–û—à–∏–±–∫–∞: ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 'error');
        return;
    }
    
    const formData = {
        name: document.getElementById('editFullName').value.trim(),
        email: document.getElementById('editEmail').value.trim(),
        phone: document.getElementById('editPhone').value.trim(),
        delivery_address: document.getElementById('editDeliveryAddress').value.trim(),
        delivery_type: document.getElementById('editDeliveryType').value,
        delivery_time: document.getElementById('editDeliveryTime').value.trim(),
        comment: document.getElementById('editComment').value.trim()
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –§–ò–û', 'error');
        document.getElementById('editFullName').focus();
        return;
    }
    
    if (!formData.email) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ email', 'error');
        document.getElementById('editEmail').focus();
        return;
    }
    
    if (!formData.phone) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω', 'error');
        document.getElementById('editPhone').focus();
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const saveButton = document.querySelector('.modal-btn-primary');
        const originalText = saveButton.textContent;
        saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        saveButton.disabled = true;
        
        await updateOrder(currentOrderId, formData);
        
        showNotification('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω', 'success');
        closeModal('editOrderModal');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await loadOrders();
        renderOrdersTable();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const saveButton = document.querySelector('.modal-btn-primary');
        saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        saveButton.disabled = false;
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function showDeleteConfirm(orderId) {
    currentOrderId = orderId;
    const modal = document.getElementById('deleteOrderModal');
    modal.style.display = 'flex';
    
    console.log(`‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderId}`);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function confirmDeleteOrder() {
    if (!currentOrderId) {
        showNotification('–û—à–∏–±–∫–∞: ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 'error');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const deleteButton = document.querySelector('.modal-btn-danger');
        const originalText = deleteButton.textContent;
        deleteButton.textContent = '–£–¥–∞–ª–µ–Ω–∏–µ...';
        deleteButton.disabled = true;
        
        await deleteOrderFromServer(currentOrderId);
        
        showNotification('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', 'success');
        closeModal('deleteOrderModal');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await loadOrders();
        renderOrdersTable();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${error.message}`, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const deleteButton = document.querySelector('.modal-btn-danger');
        deleteButton.textContent = '–î–∞, —É–¥–∞–ª–∏—Ç—å';
        deleteButton.disabled = false;
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
    currentOrderId = null;
    console.log(`üìå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: ${modalId}`);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
            currentOrderId = null;
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeModal('orderDetailsModal');
            closeModal('editOrderModal');
            closeModal('deleteOrderModal');
        }
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelectorAll('.modal-content').forEach(modalContent => {
        modalContent.addEventListener('click', (e) => {
            e.stopPropagation();
        });
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(notification => {
        notification.remove();
    });
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 8px;
        color: white;
        z-index: 10000;
        max-width: 400px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.2);
        animation: slideInRight 0.3s ease;
        font-size: 14px;
        font-weight: 500;
    `;
    
    const colors = {
        success: '#28a745',
        error: '#dc3545', 
        warning: '#ffc107',
        info: '#17a2b8'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    .course-description {
        font-size: 12px;
        color: #666;
        margin-top: 4px;
        line-height: 1.3;
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initializeOrdersPage);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.showOrderDetails = showOrderDetails;
window.editOrder = editOrder;
window.showDeleteConfirm = showDeleteConfirm;
window.confirmDeleteOrder = confirmDeleteOrder;
window.closeModal = closeModal;
window.saveOrderChanges = saveOrderChanges;